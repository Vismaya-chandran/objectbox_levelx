// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'object_box/relation/relation.dart';
import 'object_box/temp/temp.dart';
import 'object_box/user/entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 809911937287307525),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(6, 8587563063839365646),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1941519984191485508),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3932237664095723737),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 780841364355862883),
            name: 'age',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(1, 726255872690388141)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8848635698950130431),
            name: 'emailAddress',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(2, 4237212672702418411)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 78315925516284058),
            name: 'userName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(3, 8322511466505499924)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8587563063839365646),
            name: 'privateField',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5540863766080113280),
      name: 'TempEntity',
      lastPropertyId: const obx_int.IdUid(4, 518348531977396903),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8752902886420371931),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5509928153085408674),
            name: 'tempId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3411552520121371402),
      name: 'Course',
      lastPropertyId: const obx_int.IdUid(2, 7999232961592105005),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6113791666118628756),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7999232961592105005),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 7034362558414964854),
            name: 'students',
            targetId: const obx_int.IdUid(6, 830568589569621221))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4692573897160168480),
      name: 'Passport',
      lastPropertyId: const obx_int.IdUid(3, 5816109062399823233),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5931474021155170562),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 425671906516307673),
            name: 'passportNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5816109062399823233),
            name: 'personId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 5160346207046651804),
            relationTarget: 'Person')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2777863112680964994),
      name: 'Person',
      lastPropertyId: const obx_int.IdUid(3, 6714901774665131364),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4619633874203856101),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5592327961352269435),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6714901774665131364),
            name: 'passportId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 5795253024360146065),
            relationTarget: 'Passport')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 830568589569621221),
      name: 'Student',
      lastPropertyId: const obx_int.IdUid(3, 1096194592863529639),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3057087372553573198),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7411030304847252600),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1096194592863529639),
            name: 'teacherId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 326314817228441676),
            relationTarget: 'Teacher')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 9149225080051756366),
            name: 'courses',
            targetId: const obx_int.IdUid(3, 3411552520121371402))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 6133878198734864625),
      name: 'Teacher',
      lastPropertyId: const obx_int.IdUid(2, 3619818607725430723),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4162195528606222219),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3619818607725430723),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 3064509721920846442),
            name: 'students',
            targetId: const obx_int.IdUid(6, 830568589569621221))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 6133878198734864625),
      lastIndexId: const obx_int.IdUid(6, 326314817228441676),
      lastRelationId: const obx_int.IdUid(3, 3064509721920846442),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [591738278221678512, 518348531977396903],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailAddressOffset = fbb.writeString(object.emailAddress);
          final userNameOffset = fbb.writeString(object.userName);
          final privateFieldOffset = fbb.writeString(object.privateField);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.age);
          fbb.addOffset(3, emailAddressOffset);
          fbb.addOffset(4, userNameOffset);
          fbb.addOffset(5, privateFieldOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final ageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final emailAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final privateFieldParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = User(
              id: idParam,
              name: nameParam,
              age: ageParam,
              emailAddress: emailAddressParam,
              userName: userNameParam,
              privateField: privateFieldParam);

          return object;
        }),
    TempEntity: obx_int.EntityDefinition<TempEntity>(
        model: _entities[1],
        toOneRelations: (TempEntity object) => [],
        toManyRelations: (TempEntity object) => {},
        getId: (TempEntity object) => object.id,
        setId: (TempEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TempEntity object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.tempId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final tempIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = TempEntity(id: idParam, tempId: tempIdParam);

          return object;
        }),
    Course: obx_int.EntityDefinition<Course>(
        model: _entities[2],
        toOneRelations: (Course object) => [],
        toManyRelations: (Course object) =>
            {obx_int.RelInfo<Course>.toMany(1, object.id): object.students},
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          object.id = id;
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Course(id: idParam, title: titleParam);
          obx_int.InternalToManyAccess.setRelInfo<Course>(object.students,
              store, obx_int.RelInfo<Course>.toMany(1, object.id));
          return object;
        }),
    Passport: obx_int.EntityDefinition<Passport>(
        model: _entities[3],
        toOneRelations: (Passport object) => [object.person],
        toManyRelations: (Passport object) => {},
        getId: (Passport object) => object.id,
        setId: (Passport object, int id) {
          object.id = id;
        },
        objectToFB: (Passport object, fb.Builder fbb) {
          final passportNumberOffset = fbb.writeString(object.passportNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, passportNumberOffset);
          fbb.addInt64(2, object.person.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final passportNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object =
              Passport(id: idParam, passportNumber: passportNumberParam);
          object.person.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.person.attach(store);
          return object;
        }),
    Person: obx_int.EntityDefinition<Person>(
        model: _entities[4],
        toOneRelations: (Person object) => [object.passport],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.passport.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Person(id: idParam, name: nameParam);
          object.passport.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.passport.attach(store);
          return object;
        }),
    Student: obx_int.EntityDefinition<Student>(
        model: _entities[5],
        toOneRelations: (Student object) => [object.teacher],
        toManyRelations: (Student object) =>
            {obx_int.RelInfo<Student>.toMany(2, object.id): object.courses},
        getId: (Student object) => object.id,
        setId: (Student object, int id) {
          object.id = id;
        },
        objectToFB: (Student object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.teacher.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Student(id: idParam, name: nameParam);
          object.teacher.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.teacher.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Student>(object.courses,
              store, obx_int.RelInfo<Student>.toMany(2, object.id));
          return object;
        }),
    Teacher: obx_int.EntityDefinition<Teacher>(
        model: _entities[6],
        toOneRelations: (Teacher object) => [],
        toManyRelations: (Teacher object) =>
            {obx_int.RelInfo<Teacher>.toMany(3, object.id): object.students},
        getId: (Teacher object) => object.id,
        setId: (Teacher object, int id) {
          object.id = id;
        },
        objectToFB: (Teacher object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Teacher(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<Teacher>(object.students,
              store, obx_int.RelInfo<Teacher>.toMany(3, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.age].
  static final age = obx.QueryIntegerProperty<User>(_entities[0].properties[2]);

  /// See [User.emailAddress].
  static final emailAddress =
      obx.QueryStringProperty<User>(_entities[0].properties[3]);

  /// See [User.userName].
  static final userName =
      obx.QueryStringProperty<User>(_entities[0].properties[4]);

  /// See [User.privateField].
  static final privateField =
      obx.QueryStringProperty<User>(_entities[0].properties[5]);
}

/// [TempEntity] entity fields to define ObjectBox queries.
class TempEntity_ {
  /// See [TempEntity.id].
  static final id =
      obx.QueryIntegerProperty<TempEntity>(_entities[1].properties[0]);

  /// See [TempEntity.tempId].
  static final tempId =
      obx.QueryIntegerProperty<TempEntity>(_entities[1].properties[1]);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// See [Course.id].
  static final id =
      obx.QueryIntegerProperty<Course>(_entities[2].properties[0]);

  /// See [Course.title].
  static final title =
      obx.QueryStringProperty<Course>(_entities[2].properties[1]);

  /// see [Course.students]
  static final students =
      obx.QueryRelationToMany<Course, Student>(_entities[2].relations[0]);
}

/// [Passport] entity fields to define ObjectBox queries.
class Passport_ {
  /// See [Passport.id].
  static final id =
      obx.QueryIntegerProperty<Passport>(_entities[3].properties[0]);

  /// See [Passport.passportNumber].
  static final passportNumber =
      obx.QueryStringProperty<Passport>(_entities[3].properties[1]);

  /// See [Passport.person].
  static final person =
      obx.QueryRelationToOne<Passport, Person>(_entities[3].properties[2]);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// See [Person.id].
  static final id =
      obx.QueryIntegerProperty<Person>(_entities[4].properties[0]);

  /// See [Person.name].
  static final name =
      obx.QueryStringProperty<Person>(_entities[4].properties[1]);

  /// See [Person.passport].
  static final passport =
      obx.QueryRelationToOne<Person, Passport>(_entities[4].properties[2]);
}

/// [Student] entity fields to define ObjectBox queries.
class Student_ {
  /// See [Student.id].
  static final id =
      obx.QueryIntegerProperty<Student>(_entities[5].properties[0]);

  /// See [Student.name].
  static final name =
      obx.QueryStringProperty<Student>(_entities[5].properties[1]);

  /// See [Student.teacher].
  static final teacher =
      obx.QueryRelationToOne<Student, Teacher>(_entities[5].properties[2]);

  /// see [Student.courses]
  static final courses =
      obx.QueryRelationToMany<Student, Course>(_entities[5].relations[0]);
}

/// [Teacher] entity fields to define ObjectBox queries.
class Teacher_ {
  /// See [Teacher.id].
  static final id =
      obx.QueryIntegerProperty<Teacher>(_entities[6].properties[0]);

  /// See [Teacher.name].
  static final name =
      obx.QueryStringProperty<Teacher>(_entities[6].properties[1]);

  /// see [Teacher.students]
  static final students =
      obx.QueryRelationToMany<Teacher, Student>(_entities[6].relations[0]);
}
